##\u9879\u76EE\u57FA\u672C\u4FE1\u606F
server.port = ${instancePort}
spring.profiles.active = dev
spring.application.name = spartacus-gateway
spring.jackson.time-zone = Asia/Shanghai

##\u542F\u7528Gzip\u538B\u7F29\uFF08\u9ED8\u8BA4\u652F\u6301text/html\u7B49\uFF0C\u4F46\u4E0D\u652F\u6301application/json\uFF09
server.compression.enabled = true
server.compression.mime-types = text/html,text/css,application/javascript,application/json,text/event-stream

##Actuator\u914D\u7F6E
management.endpoints.web.exposure.include = *
management.endpoints.web.base-path = /actuator

##\u8DEF\u7531\u914D\u7F6E
spring.cloud.gateway.discovery.locator.enabled = true
spring.cloud.gateway.discovery.locator.lower-case-service-id = true

spring.cloud.gateway.routes[0].id = spartacus-auth-rote
spring.cloud.gateway.routes[0].uri = lb://spartacus-auth
spring.cloud.gateway.routes[0].predicates[0] = Path=/spartacus-auth/**
spring.cloud.gateway.routes[0].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[1].id = spartacus-common-rote
spring.cloud.gateway.routes[1].uri = lb://spartacus-common
spring.cloud.gateway.routes[1].predicates[0] = Path=/spartacus-common/**
spring.cloud.gateway.routes[1].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[2].id = spartacus-comment-rote
spring.cloud.gateway.routes[2].uri = lb://spartacus-comment
spring.cloud.gateway.routes[2].predicates[0] = Path=/spartacus-comment/**
spring.cloud.gateway.routes[2].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[3].id = spartacus-article-rote
spring.cloud.gateway.routes[3].uri = lb://spartacus-article
spring.cloud.gateway.routes[3].predicates[0] = Path=/spartacus-article/**
spring.cloud.gateway.routes[3].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[4].id = spartacus-resource-rote
spring.cloud.gateway.routes[4].uri = lb://spartacus-resource
spring.cloud.gateway.routes[4].predicates[0] = Path=/spartacus-resource/**
spring.cloud.gateway.routes[4].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[5].id = spartacus-monitor-rote
spring.cloud.gateway.routes[5].uri = lb://spartacus-monitor
spring.cloud.gateway.routes[5].predicates[0] = Path=/spartacus-monitor/**
spring.cloud.gateway.routes[5].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[6].id = spartacus-system-rote
spring.cloud.gateway.routes[6].uri = lb://spartacus-system
spring.cloud.gateway.routes[6].predicates[0] = Path=/spartacus-system/**
spring.cloud.gateway.routes[6].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[7].id = spartacus-chat-rote
spring.cloud.gateway.routes[7].uri = lb://spartacus-chat
spring.cloud.gateway.routes[7].predicates[0] = Path=/spartacus-chat/**
spring.cloud.gateway.routes[7].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[8].id = spartacus-friday-rote
spring.cloud.gateway.routes[8].uri = lb://spartacus-friday
spring.cloud.gateway.routes[8].predicates[0] = Path=/spartacus-friday/**
spring.cloud.gateway.routes[8].filters[0] = StripPrefix=1

spring.cloud.gateway.routes[9].id = spartacus-sunday-rote
spring.cloud.gateway.routes[9].uri = lb://spartacus-sunday
spring.cloud.gateway.routes[9].predicates[0] = Path=/spartacus-sunday/**
spring.cloud.gateway.routes[9].filters[0] = StripPrefix=1

##\u516C\u94A5\u5730\u5740(\u7528\u4E8E\u5BF9token\u9A8C\u7B7E)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri = http://10.0.0.3:3001/rsa/authRsaPublicKey

##\u6570\u636E\u6E90\u914D\u7F6E
spring.datasource.url = jdbc:mysql://175.27.138.99:3306/spartacus?connectTimeout=30000&serverTimezone=Asia/Shanghai&useUnicode=yes&useSSL=false&characterEncoding=UTF-8&allowMultiQueries=true
spring.datasource.username = root
spring.datasource.password = Pwd@123
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.type = com.zaxxer.hikari.HikariDataSource

## Hikari\u914D\u7F6E
# \u8FDE\u63A5\u6C60\u540D\u79F0
spring.datasource.hikari.pool-name = Hikari_Pool
# \u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5\u6570\u91CF
spring.datasource.hikari.minimum-idle = 5
# \u7A7A\u95F2\u8FDE\u63A5(minimum-idle\u4EE5\u5916\u7684\u7A7A\u95F2\u8FDE\u63A5)\u5B58\u6D3B\u6700\u5927\u65F6\u95F4\uFF0C\u9ED8\u8BA4600000\uFF0810\u5206\u949F\uFF09
spring.datasource.hikari.idle-timeout = 60000
# \u8FDE\u63A5\u6C60\u6700\u5927\u8FDE\u63A5\u6570\uFF0C\u9ED8\u8BA4\u662F10
spring.datasource.hikari.maximum-pool-size = 10
# \u6B64\u5C5E\u6027\u63A7\u5236\u4ECE\u6C60\u8FD4\u56DE\u7684\u8FDE\u63A5\u7684\u9ED8\u8BA4\u81EA\u52A8\u63D0\u4EA4\u884C\u4E3A,\u9ED8\u8BA4\u503C\uFF1Atrue
spring.datasource.hikari.auto-commit = true
# \u6B64\u5C5E\u6027\u63A7\u5236\u6C60\u4E2D\u8FDE\u63A5\u7684\u6700\u957F\u751F\u547D\u5468\u671F\uFF0C\u503C0\u8868\u793A\u65E0\u9650\u751F\u547D\u5468\u671F\uFF0C\u9ED8\u8BA41800000\u537330\u5206\u949F
spring.datasource.hikari.max-lifetime = 60000
# \u6570\u636E\u5E93\u8FDE\u63A5\u8D85\u65F6\u65F6\u95F4,\u9ED8\u8BA430\u79D2\uFF0C\u537330000
spring.datasource.hikari.connection-timeout = 30000
spring.datasource.hikari.connection-test-query = select 1

##mybatis\u914D\u7F6E
mybatis.mapper-locations = classpath:mapper/*.xml
mybatis.configuration.log-impl = org.apache.ibatis.logging.stdout.StdOutImpl

##redis\u914D\u7F6E
# redis cluster\u96C6\u7FA4\u53EA\u80FD\u4F7F\u7528DB0
spring.redis.database = 0
# Redis\u670D\u52A1\u5668\u8FDE\u63A5\u5BC6\u7801\uFF08\u9ED8\u8BA4\u4E3A\u7A7A\uFF09
spring.redis.password = Pwd@123
# redis\u8FDE\u63A5\u8D85\u65F6\u65F6\u95F4
spring.redis.timeout = 60s
# \u83B7\u53D6\u5931\u8D25 \u6700\u5927\u91CD\u5B9A\u5411\u6B21\u6570
spring.redis.cluster.max-redirects = 3
# \u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A0
spring.redis.jedis.pool.min-idle = 5
# \u8FDE\u63A5\u6C60\u4E2D\u6700\u5927\u7A7A\u95F2\u8FDE\u63A5\u6570\u9ED8\u8BA4\u503C\u4E3A8
spring.redis.jedis.pool.max-idle = 10
# \u8FDE\u63A5\u6C60\u6700\u5927\u8FDE\u63A5\u6570\u9ED8\u8BA4\u503C\u4E3A8
spring.redis.jedis.pool.max-active = 80
# \u8FDE\u63A5\u6C60\u6700\u5927\u963B\u585E\u65F6\u95F4\uFF08\u4F7F\u7528\u8D1F\u503C\u8868\u793A\u6CA1\u6709\u9650\u5236\uFF09
spring.redis.jedis.pool.max-wait = -1
# Redis \u96C6\u7FA4\u5730\u5740\u4FE1\u606F
spring.redis.cluster.nodes[0] = 10.0.0.5:6371
spring.redis.cluster.nodes[1] = 10.0.0.5:6372
spring.redis.cluster.nodes[2] = 10.0.0.5:6373
spring.redis.cluster.nodes[3] = 10.0.0.5:6374
spring.redis.cluster.nodes[4] = 10.0.0.5:6375
spring.redis.cluster.nodes[5] = 10.0.0.5:6376

##Ribbon\u914D\u7F6E
#\u5F00\u542F\u57FA\u4E8E\u8D1F\u8F7D\u5747\u8861\u3001\u5F00\u542F\u91CD\u8BD5\u673A\u5236\u3001\u6574\u5408eureka\u3001\u5F00\u542F\u9965\u997F\u52A0\u8F7D\u6A21\u5F0F
spring.cloud.loadbalancer.ribbon.enabled = true
spring.cloud.loadbalancer.retry.enabled = true
ribbon.eureka.enabled = true
#ribbon.eager-load.enabled=true
#ribbon.eager-load.clients=spartacus-system,spartacus-chat,spartacus-auth,spartacus-common,spartacus-comment,spartacus-article,spartacus-resource,spartacus-monitor,spartacus-friday,spartacus-sunday

#spartacus-auth
#\u4FDD\u8BC1\u4ECE\u6240\u6709zone\u9009\u53D6\u5BF9\u5F53\u524D\u5BA2\u6237\u7AEF\u670D\u52A1\u6700\u597D\u7684\u670D\u52A1\u7EC4\u5217\u8868
spartacus-auth.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
#\u4F7F\u7528\u5185\u7F6E\u53EF\u7528\u8FC7\u6EE4\u8D1F\u8F7D\u5747\u8861\u7B97\u6CD5
spartacus-auth.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
#\u6839\u636E\u6CE8\u518C\u4E2D\u5FC3\u5B9E\u4F8B\u72B6\u6001\u662F\u5426\u4E3AUP\uFF0C\u6765\u5224\u65AD\u5B9E\u4F8B\u662F\u5426\u53EF\u7528
spartacus-auth.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
#\u4ECE\u6CE8\u518C\u4E2D\u5FC3\u62C9\u53D6\u5B9E\u4F8B\u5217\u8868
spartacus-auth.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
#\u4EC0\u4E48\u4E5F\u4E0D\u8FC7\u6EE4\uFF0C\u76F4\u63A5\u8FD4\u56DE\u4ECEEureka\u4E0A\u9762\u62C9\u53D6\u7684\u539F\u59CB\u5217\u8868\uFF0C\u4E5F\u5C31\u662F\u8FD4\u56DE\u6240\u6709zone\u7684\u6240\u6709\u5BF9\u5E94\u5B9E\u4F8B
spartacus-auth.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
#\u5FC5\u987B\u5148\u5F00\u542F\u5168\u5C40spring.cloud.loadbalancer.retry.enabled=true\uFF0C\u4E0B\u9762\u7684\u91CD\u8BD5\u914D\u7F6E\u624D\u4F1A\u751F\u6548
# Max number of retries on the same server (excluding the first try)
spartacus-auth.ribbon.MaxAutoRetries = 2
# Max number of next servers to retry (\u4E0B\u4E00\u5B9E\u4F8B\u91CD\u8BD5\u6B21\u6570\uFF0Cexcluding the first server)
spartacus-auth.ribbon.MaxAutoRetriesNextServer = 2
# Whether all operations can be retried for this client
spartacus-auth.ribbon.OkToRetryOnAllOperations = true
# Interval to refresh the server list from the source(ms)
spartacus-auth.ribbon.ServerListRefreshInterval = 30000
# Connect timeout used by Apache HttpClient(ms)
spartacus-auth.ribbon.ConnectTimeout = 3000
# Read timeout used by Apache HttpClient(ms)
spartacus-auth.ribbon.ReadTimeout = 3000

#spartacus-common
spartacus-common.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-common.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-common.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-common.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-common.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-common.ribbon.MaxAutoRetries = 2
spartacus-common.ribbon.MaxAutoRetriesNextServer = 2
spartacus-common.ribbon.OkToRetryOnAllOperations = true
spartacus-common.ribbon.ServerListRefreshInterval = 30000
spartacus-common.ribbon.ConnectTimeout = 3000
spartacus-common.ribbon.ReadTimeout = 3000

#spartacus-comment
spartacus-comment.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-comment.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-comment.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-comment.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-comment.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-comment.ribbon.MaxAutoRetries = 2
spartacus-comment.ribbon.MaxAutoRetriesNextServer = 2
spartacus-comment.ribbon.OkToRetryOnAllOperations = true
spartacus-comment.ribbon.ServerListRefreshInterval = 30000
spartacus-comment.ribbon.ConnectTimeout = 3000
spartacus-comment.ribbon.ReadTimeout = 3000

#spartacus-article
spartacus-article.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-article.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-article.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-article.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-article.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-article.ribbon.MaxAutoRetries = 2
spartacus-article.ribbon.MaxAutoRetriesNextServer = 2
spartacus-article.ribbon.OkToRetryOnAllOperations = true
spartacus-article.ribbon.ServerListRefreshInterval = 30000
spartacus-article.ribbon.ConnectTimeout = 3000
spartacus-article.ribbon.ReadTimeout = 3000

#spartacus-resource
spartacus-resource.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-resource.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-resource.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-resource.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-resource.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-resource.ribbon.MaxAutoRetries = 2
spartacus-resource.ribbon.MaxAutoRetriesNextServer = 2
spartacus-resource.ribbon.OkToRetryOnAllOperations = true
spartacus-resource.ribbon.ServerListRefreshInterval = 30000
spartacus-resource.ribbon.ConnectTimeout = 3000
spartacus-resource.ribbon.ReadTimeout = 3000

#spartacus-monitor
spartacus-monitor.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-monitor.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-monitor.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-monitor.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-monitor.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-monitor.ribbon.MaxAutoRetries = 2
spartacus-monitor.ribbon.MaxAutoRetriesNextServer = 2
spartacus-monitor.ribbon.OkToRetryOnAllOperations = true
spartacus-monitor.ribbon.ServerListRefreshInterval = 30000
spartacus-monitor.ribbon.ConnectTimeout = 3000
spartacus-monitor.ribbon.ReadTimeout = 3000

#spartacus-system
spartacus-system.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-system.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-system.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-system.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-system.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-system.ribbon.MaxAutoRetries = 2
spartacus-system.ribbon.MaxAutoRetriesNextServer = 2
spartacus-system.ribbon.OkToRetryOnAllOperations = true
spartacus-system.ribbon.ServerListRefreshInterval = 30000
spartacus-system.ribbon.ConnectTimeout = 3000
spartacus-system.ribbon.ReadTimeout = 3000

#spartacus-chat
spartacus-chat.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-chat.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-chat.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-chat.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-chat.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-chat.ribbon.MaxAutoRetries = 2
spartacus-chat.ribbon.MaxAutoRetriesNextServer = 2
spartacus-chat.ribbon.OkToRetryOnAllOperations = true
spartacus-chat.ribbon.ServerListRefreshInterval = 30000
spartacus-chat.ribbon.ConnectTimeout = 3000
spartacus-chat.ribbon.ReadTimeout = 3000

#spartacus-friday
spartacus-friday.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-friday.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-friday.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-friday.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-friday.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-friday.ribbon.MaxAutoRetries = 2
spartacus-friday.ribbon.MaxAutoRetriesNextServer = 2
spartacus-friday.ribbon.OkToRetryOnAllOperations = true
spartacus-friday.ribbon.ServerListRefreshInterval = 30000
spartacus-friday.ribbon.ConnectTimeout = 3000
spartacus-friday.ribbon.ReadTimeout = 3000

#spartacus-sunday
spartacus-sunday.ribbon.NFLoadBalancerClassName = com.netflix.loadbalancer.ZoneAwareLoadBalancer
spartacus-sunday.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.AvailabilityFilteringRule
spartacus-sunday.ribbon.NFLoadBalancerPingClassName = com.netflix.niws.loadbalancer.NIWSDiscoveryPing
spartacus-sunday.ribbon.NIWSServerListClassName = com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
spartacus-sunday.ribbon.NIWSServerListFilterClassName = com.netflix.niws.loadbalancer.DefaultNIWSServerListFilter
spartacus-sunday.ribbon.MaxAutoRetries = 2
spartacus-sunday.ribbon.MaxAutoRetriesNextServer = 2
spartacus-sunday.ribbon.OkToRetryOnAllOperations = true
spartacus-sunday.ribbon.ServerListRefreshInterval = 30000
spartacus-sunday.ribbon.ConnectTimeout = 3000
spartacus-sunday.ribbon.ReadTimeout = 3000

##\u767D\u540D\u5355
spartacus.gateway.security.white.urls = /spartacus-auth/rsa/authRsaPublicKey,/spartacus-auth/rsa/passRsaPublicKey,/spartacus-auth/code/image,/spartacus-auth/code/sms,/spartacus-auth/authentication/form,/spartacus-auth/authentication/mobile,/spartacus-auth/auth/qq,/spartacus-auth/auth/weixin,/spartacus-friday/**,/spartacus-friday/pages/**,/spartacus-friday/js/**,/spartacus-friday/css/**,/spartacus-friday/fonts/**,/spartacus-friday/img/**,/spartacus-friday/plugins/**,/spartacus-friday/wechat/**,/spartacus-chat/**,/spartacus-gateway/jwt/decode/**,/jwt/decode/**,/spartacus-auth/auth/logout/**,/spartacus-sunday/**,/spartacus-sunday/config/**,/spartacus-sunday/css/**,/spartacus-sunday/error/**,/spartacus-sunday/fonts/**,/spartacus-sunday/img/**,/spartacus-sunday/js/**,/spartacus-sunday/plugins/**,/spartacus-sunday/wechat/**,/spartacus-system/system/loadBlogProfile,/spartacus-article/article/findByCategory,/spartacus-article/article/findByCriteria,/spartacus-comment/comment/getRecentComments,/spartacus-system/system/findNoticeByCriteria,/spartacus-article/article/getArticle/**,/spartacus-article/article/getArchive,/spartacus-article/article/searchByKeywords,/spartacus-comment/comment/findByArticleId,/spartacus-resource/endpoint/**

##\u9700\u8981\u8FDB\u884C\u8BBF\u95EE\u7EDF\u8BA1\u7684\u63A5\u53E3\uFF08\u4EC5\u9488\u5BF9\u535A\u5BA2\u7AEF\u8C03\u7528\u7684\u63A5\u53E3\uFF09
spartacus.gateway.access.count.urls = /spartacus-article/article/getArchive,/spartacus-article/article/getArticle/**,/spartacus-comment/comment/findByArticleId,/spartacus-comment/comment/submitComment,/spartacus-article/articleLike/like,/spartacus-article/articleLike/unLike,/spartacus-article/articleLike/checkOneLikeMember,/spartacus-article/articleLike/checkMulLikeMember,/spartacus-article/article/searchByKeywords,/spartacus-chat/queryContacts,/spartacus-chat/searchMessage,/spartacus-chat/saveContact,/spartacus-chat/saveMessage,/spartacus-system/system/loadBlogProfile,/spartacus-system/system/findNoticeByCriteria,/spartacus-article/article/findByCategory,/spartacus-article/article/findByCriteria,/spartacus-comment/comment/getRecentComments

#\u767E\u5EA6\u5730\u56FE\u5F00\u53D1\u8005\u5BC6\u94A5\uFF08\u8FD9\u91CC\u7533\u8BF7\uFF1Ahttps://lbsyun.baidu.com/index.php?title=webapi/ip-api\uFF09
spartacus.baiduMap.ak = Pa77c8TQ57E9C95Gs5bUEGdOwsfsfkLZKXfM
spartacus.baiduMap.url = http://api.map.baidu.com/location/ip?coor=gcj02

##\u65E5\u5FD7\u914D\u7F6E
logging.config = classpath:logback-spring.xml

##logstash
logstash.server.address = 10.0.0.5:4560

##zipkin
spring.zipkin.base-url = http://10.0.0.3:9411
spring.zipkin.sender.type = web
spring.sleuth.sampler.probability = 1.0

##eureka\u914D\u7F6E
eureka.instance.hostname = ${instanceIp}
eureka.instance.preferIpAddress = true
eureka.instance.ip-address = ${instanceIp}
eureka.instance.instance-id = ${instanceIp}:${instancePort}
eureka.client.register-with-eureka = true
eureka.client.fetch-registry = true
eureka.client.service-url.defaultZone = http://root:Pwd@123@10.0.0.10:1001/eureka/,http://root:Pwd@123@10.0.0.4:1002/eureka/,http://root:Pwd@123@10.0.0.14:1003/eureka/
